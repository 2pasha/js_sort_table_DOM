{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","headers","tHead","querySelectorAll","sortTable","column","rows","Array","from","tBodies","sort","a","b","aValue","cells","cellIndex","textContent","bValue","aNumber","convertToNumber","bNumber","isNaN","localeCompare","append","number","parseFloat","replace","forEach","header","addEventListener"],"mappings":";AAAA,aAgCC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA9BD,IAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAUH,EAAMI,MAAMC,iBAAiB,MAQ7C,SAASC,EAAUC,GAAQ,IAAA,EACnBC,EAAOC,MAAMC,KAAKV,EAAMW,QAAQ,GAAGN,iBAAiB,OAE1DG,EAAKI,KAAK,SAACC,EAAGC,GACNC,IAAAA,EAASF,EAAEG,MAAMT,EAAOU,WAAWC,YACnCC,EAASL,EAAEE,MAAMT,EAAOU,WAAWC,YACnCE,EAAUC,EAAgBN,GAC1BO,EAAUD,EAAgBF,GAE5BI,OAAAA,MAAMH,GACDL,EAAOS,cAAcL,GAGvBC,EAAUE,KAGnBtB,EAAAA,EAAMW,QAAQ,IAAGc,OAAUjB,MAAAA,EAAAA,EAAAA,IAG7B,SAASa,EAAgBK,GAChBC,OAAAA,WAAWD,EAAOE,QAAQ,QAAS,KA1B5CzB,EAAQ0B,QAAQ,SAAAC,GACdA,EAAOC,iBAAiB,QAAS,WAC/BzB,EAAUwB","file":"main.799dfe27.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst table = document.querySelector('table');\r\nconst headers = table.tHead.querySelectorAll('th');\r\n\r\nheaders.forEach(header => {\r\n  header.addEventListener('click', () => {\r\n    sortTable(header);\r\n  });\r\n});\r\n\r\nfunction sortTable(column) {\r\n  const rows = Array.from(table.tBodies[0].querySelectorAll('tr'));\r\n\r\n  rows.sort((a, b) => {\r\n    const aValue = a.cells[column.cellIndex].textContent;\r\n    const bValue = b.cells[column.cellIndex].textContent;\r\n    const aNumber = convertToNumber(aValue);\r\n    const bNumber = convertToNumber(bValue);\r\n\r\n    if (isNaN(aNumber)) {\r\n      return aValue.localeCompare(bValue);\r\n    }\r\n\r\n    return aNumber - bNumber;\r\n  });\r\n\r\n  table.tBodies[0].append(...rows);\r\n}\r\n\r\nfunction convertToNumber(number) {\r\n  return parseFloat(number.replace(/[$,]/g, ''));\r\n}\r\n"]}